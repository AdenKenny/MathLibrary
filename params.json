{
  "name": "Math Library",
  "tagline": "All the greatest and most efficient ways of doing math!",
  "body": "### Introduction\r\nThis library provides math functionality that was sorely lacking from the standard Java libraries. The implemented methods are fast, efficient, safe and extremely accurate!\r\n\r\n### Advantages\r\n\r\n* A wide range of methods from basic addition (Both bitwise and recursive) to calculating unit vectors.\r\n\r\n* All methods are private and are therefore very safe! This means you must access them through reflection.\r\n\r\n* Excellent documentation meaning you'll never be confused.\r\n\r\n* Well designed utility classes such as a 'Vector' class to represent n-dimensional vectors.\r\n\r\n* A very well engineered structure using the greatest tool known to mankind ... UML.\r\n\r\n\r\n### Disadvantages \r\n\r\n* None.\r\n\r\n\r\n### Examples\r\n\r\nA user wishes to add two numbers together. Using the standard Java library you would have to go through the large effort of writing code such as this...\r\n\r\n    //We want to add two integers a and b.\r\n    //int result = a + b;\r\n\r\nCode such as this is too complicated and unsafe for everyday use. A user cannot even see the method that is adding their two numbers together. This means that we cannot be sure that for all situations that this will return a correct result. \r\n\r\nUsing MathLibrary a user could simply use the recursive addition method called 'recAdd' to add two numbers together. With the genius solution of using the 'Number' wrapper class for parameter types in all methods a user does not need to worry about type issues or precision loss as the library will handle it all for you. \r\n\r\n\r\n    private static Number recAdd(Number a, Number b) {\r\n       double s = a.doubleValue();\r\n       double r = b.doubleValue();\r\n       \r\n       try {\r\n              if(s == 0) {\r\n                     return r;\r\n              }\r\n\r\n              else if(r == 0) {\r\n                     return s;\r\n              }\r\n\r\n              return recAdd(s + 1, r - 1);\r\n       }\r\n\r\n       catch(StackOverflowError e) {\r\n              return r + s;\r\n       }\r\n    }\r\n\r\nA user can then access this method like so. Note that reflection is required as for additional safety as all methods are private.\r\n\r\n    private int doArith(int a, int b, String op) {\r\n       BasicMath lib = new BasicMath();\r\n       \r\n       Class<?> class = b.getClass();\r\n\r\n       Method[] methods = class.getDeclaredMethods();\r\n\r\n       for(Method m : methods) {\r\n              if(m.getName().equals(op) {\r\n                     Class<?> paramTypes = m.getParameterTypes();\r\n\r\n                     Class<?> cArgs = new Class<?>[paramTypes.length];\r\n\r\n                     for(int i = 0; i < paramTypes.length; i++) {\r\n                            cArgs[i] = paramTypes[i];\r\n                     }\r\n                     \r\n                     String methodName = m.getName();\r\n                     \r\n                     Method method = class.getDeclaredMethod(methodName, cArgs);\r\n\r\n                     Number val = (Number) method.invoke(lib, a, b);\r\n\r\n                     return val.intValue();\r\n       }\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}